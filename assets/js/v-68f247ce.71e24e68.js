"use strict";(self.webpackChunkkevinBlog=self.webpackChunkkevinBlog||[]).push([[42],{3582:(l,e,n)=>{n.r(e),n.d(e,{data:()=>u});const u={key:"v-68f247ce",path:"/pages/frame/vue/diff%E7%AE%97%E6%B3%95/diff%E7%AE%97%E6%B3%95.html",title:"vue-diff算法过程概述",lang:"zh-cn",frontmatter:{},excerpt:"",headers:[{level:2,title:"虚拟dom和diff算法",slug:"虚拟dom和diff算法",children:[{level:3,title:"vue v-for为什么要加key？",slug:"vue-v-for为什么要加key",children:[]},{level:3,title:"如何定义是同一个虚拟节点？",slug:"如何定义是同一个虚拟节点",children:[]},{level:3,title:"diff算法的优化策略 （Vue2.X Diff —— 双端比较）",slug:"diff算法的优化策略-vue2-x-diff-——-双端比较",children:[]},{level:3,title:"Vue 监测变化细粒度把控",slug:"vue-监测变化细粒度把控",children:[]}]}],filePathRelative:"pages/frame/vue/diff算法/diff算法.md",git:{updatedTime:1662212859e3,contributors:[{name:"kevinZzzzzzzz",email:"jie736805161@qq.com",commits:1}]}}},1814:(l,e,n)=>{n.r(e),n.d(e,{default:()=>Y});var u=n(6252),i=n(3229),d=n(5287),f=n(9328),r=n(8164),t=n(3536);const a=(0,u._)("h1",{id:"vue-diff算法过程概述",tabindex:"-1"},[(0,u._)("a",{class:"header-anchor",href:"#vue-diff算法过程概述","aria-hidden":"true"},"#"),(0,u.Uk)(" vue-diff算法过程概述")],-1),_=(0,u._)("p",null,"过程：patch（判断子节点是否为 sameVnode）-> patchVnode（sameVnode 进行对比内容是否相同）-> updateChildren（更新子节点，使用双指针和 key 进行对比更新）",-1),s=(0,u._)("ul",null,[(0,u._)("li",null,[(0,u._)("p",null,"数据变化执行setter函数触发 dep.notify()中的update函数后，执行 render function 产生新的虚拟dom，然后和旧的虚拟dom一起传入patch函数，")]),(0,u._)("li",null,[(0,u._)("p",null,[(0,u.Uk)("在patch函数中判断是否是同一个虚拟节点sameVNode，如果不是则暴力删除旧的，把新的渲染上去；如果是同个虚拟节点，就传入patchVNode函数中对比子节点，如果内容不同，就执行updateChildren 更新子节点。此过程采用"),(0,u._)("strong",null,"双指针和key"),(0,u.Uk)("进行对比更新。"),(0,u._)("strong",null,"(以旧节点为基础，进行差异修改，增删一些DOM节点)")])])],-1),o=(0,u._)("h2",{id:"虚拟dom和diff算法",tabindex:"-1"},[(0,u._)("a",{class:"header-anchor",href:"#虚拟dom和diff算法","aria-hidden":"true"},"#"),(0,u.Uk)(" 虚拟dom和diff算法")],-1),p=(0,u._)("p",null,"diff算法可以进行精细化对比，实现最小量更新。",-1),h=(0,u._)("p",null,"虚拟dom的好处是：1、经过diff算法后得出最小的差异量，集中对旧的虚拟dom进行修改，尽可能减少浏览器的回流和重绘。",-1),c=(0,u._)("p",null,[(0,u.Uk)("​ 2、创建一个 "),(0,u._)("code",null,"vnode"),(0,u.Uk)(" 的成本比较低。")],-1),k=(0,u._)("p",null,[(0,u.Uk)("虚拟dom：用"),(0,u._)("strong",null,"JS对象来描述dom的层次结构以及属性"),(0,u.Uk)("。 有tag标签，props，key唯一标识值，children子类，text文本")],-1),m=(0,u._)("p",null,[(0,u._)("img",{src:i,alt:"呵呵呵"})],-1),v=(0,u._)("p",null,[(0,u._)("img",{src:d,alt:"呵呵呵"})],-1),g=(0,u._)("h3",{id:"vue-v-for为什么要加key",tabindex:"-1"},[(0,u._)("a",{class:"header-anchor",href:"#vue-v-for为什么要加key","aria-hidden":"true"},"#"),(0,u.Uk)(" vue v-for为什么要加key？")],-1),U=(0,u._)("ul",null,[(0,u._)("li",null,[(0,u._)("p",null,"判断是否为同个虚拟dom的条件之一")]),(0,u._)("li",null,[(0,u._)("p",null,[(0,u.Uk)("（"),(0,u._)("strong",null,"关键！！！"),(0,u.Uk)("）key是节点的唯一标识，加上key可以提高diff算法效率。 在更新的前后,如果它们是同一个虚拟节点，在它们直接没有变化的情况下是不会对它们进行替换或者变更的，这是vue的一个优化策略。")])]),(0,u._)("li",null,[(0,u._)("p",null,"在diff算法中，当新旧节点交叉对比无法匹配时，会通过key值进行对比。并且根据key值识别节点，找到该节点正确的位置。")]),(0,u._)("li",null,[(0,u._)("p",null,"并且如果不加key值，那么vue会选择复用旧节点，会导致旧节点被保留下来，并且每次增删节点会导致整个v-for全部重新渲染，影响性能。")])],-1),x=(0,u._)("p",null,"为什么不建议使用 index 做 key?",-1),y=(0,u._)("ul",null,[(0,u._)("li",null,[(0,u._)("p",null,"一旦增删节点后，index会重新排序，导致节点绑定的key值也要重新赋值，节点也会重新渲染，影响性能。")]),(0,u._)("li",null,[(0,u._)("p",null,"两个不一样的东西却被误以为是一样的了。"),(0,u._)("blockquote",null,[(0,u._)("p",null,"用 index 作为 key 的坏处就是：两个不一样的东西却被误以为是一样的了。好比如你的女友被一个流氓绑架了，然后他男扮女装，冒充成你的女友，而且你竟然还长期未发现， 在他身上消耗了大量的金钱和时间，等到结婚进洞房的时候才发现，我艹，这女友竟然是冒充的，而且还是个男的！ 另外，使用 random 作为 key 的坏处是：两个完全一样的东西却被误以为是不一样的了。比如，你女友只是穿上了一套你从来没有见过的新衣服，然后你就坚决否认他是你女友，然后你就跟他分手了，活该单身一辈子！")])])],-1),b=(0,u._)("h3",{id:"如何定义是同一个虚拟节点",tabindex:"-1"},[(0,u._)("a",{class:"header-anchor",href:"#如何定义是同一个虚拟节点","aria-hidden":"true"},"#"),(0,u.Uk)(" 如何定义是同一个虚拟节点？")],-1),V=(0,u._)("p",null,[(0,u._)("img",{src:f,alt:"呵呵呵"}),(0,u.Uk)(" 新旧节点的"),(0,u._)("strong",null,"选择器相同并且key值相同"),(0,u.Uk)("！")],-1),z=(0,u._)("p",null,[(0,u.Uk)("描述："),(0,u._)("strong",null,"diff算法发生在虚拟dom上，新的虚拟dom和老虚拟dom进行精细化比较，从而算出最小量的更新，最后反应在真正的真实dom上。")],-1),D=(0,u._)("p",null,"注：1、必须是同一个虚拟节点，才会进行精细化比较。",-1),E=(0,u._)("p",null,"​ 2、diff算法只有同层比较，没有跨层比较 ，只有1、2两种情况，否则都会暴力删除旧的，然后插入新的",-1),B=(0,u._)("p",null,[(0,u._)("img",{src:r,alt:"呵呵呵"})],-1),C=(0,u._)("p",null,[(0,u._)("img",{src:t,alt:"呵呵呵"})],-1),q=(0,u._)("h3",{id:"diff算法的优化策略-vue2-x-diff-——-双端比较",tabindex:"-1"},[(0,u._)("a",{class:"header-anchor",href:"#diff算法的优化策略-vue2-x-diff-——-双端比较","aria-hidden":"true"},"#"),(0,u.Uk)(" diff算法的优化策略 （Vue2.X Diff —— 双端比较）")],-1),w=(0,u._)("p",null,[(0,u._)("strong",null,"理想情况：")],-1),W=(0,u._)("p",null,"四种命中查找（四个指针策略）",-1),Z=(0,u._)("p",null,"1、旧前与新前，命中后新旧两个头指针向后移动一位",-1),A=(0,u._)("p",null,"2、旧后与新后，命中后新旧两个尾指针向前移动一位",-1),N=(0,u._)("p",null,"3、旧前与新后（涉及移动节点，新后指向的节点移动到旧后的后面），命中后新节点的尾指针向前移动一位，旧节点的头指针向后移动一位。",-1),O=(0,u._)("p",null,"4、旧后与新前（涉及移动节点，新前指向的节点移动到旧前的前面），命中后新节点的头指针向前移动一位，旧节点的尾指针向前移动一位。",-1),X=(0,u._)("p",null,[(0,u.Uk)("依此寻找是否是"),(0,u._)("strong",null,"同一个虚拟节点"),(0,u.Uk)("，依次命中，")],-1),j=(0,u._)("p",null,[(0,u._)("strong",null,"非理想情况：")],-1),H=(0,u._)("p",null,[(0,u.Uk)("如果四次对比都没有没有命中，就把"),(0,u._)("strong",null,"新前所指向的节点"),(0,u.Uk)("带到"),(0,u._)("strong",null,"旧节点列表"),(0,u.Uk)("里遍历，看看是否能找到同个虚拟节点，")],-1),J=(0,u._)("ul",null,[(0,u._)("li",null,"如果能够找到，就将新前的节点移动到旧的虚拟dom当前的旧前节点之前，并将新前节点在旧节点列表中原来同个虚拟节点置为undefined，最后将新节点列表中的头指针往后移动一位。"),(0,u._)("li",null,"如果找不到，就在旧前节点列表的前创建一个节点存放新前节点，并将新节点列表中的头指针往后移动一位。")],-1),M=(0,u._)("p",null,"循环停止的条件是当其中一个列表的节点全部遍历完成（或者说尾指针小于前指针）",-1),P=(0,u._)("h3",{id:"vue-监测变化细粒度把控",tabindex:"-1"},[(0,u._)("a",{class:"header-anchor",href:"#vue-监测变化细粒度把控","aria-hidden":"true"},"#"),(0,u.Uk)(" Vue 监测变化细粒度把控")],-1),R=(0,u._)("ul",null,[(0,u._)("li",null,[(0,u._)("p",null,"Vue 的响应式系统是中等细粒度的方案，大量的 Watcher 会使内存开销过大，大量 diff 时间太久。所以采用组件 Watcher + 内部 Diff 的方式"),(0,u._)("ul",null,[(0,u._)("li",null,[(0,u._)("p",null,"在组件级别进行使用 Watcher 进行监测，对 data 进行依赖收集，一旦数据变化，就知道哪个位置发生变化。")]),(0,u._)("li",null,[(0,u._)("p",null,"然后在组件内部进行 Virtual Dom Diff 算法，获取更加具体节点的差异。")])])])],-1),S=(0,u._)("h1",{id:"vue3-diff-最长递增子序列",tabindex:"-1"},[(0,u._)("a",{class:"header-anchor",href:"#vue3-diff-最长递增子序列","aria-hidden":"true"},"#"),(0,u.Uk)(" Vue3 Diff -- 最长递增子序列")],-1),T={},Y=(0,n(3744).Z)(T,[["render",function(l,e){return(0,u.wg)(),(0,u.iD)(u.HY,null,[a,_,s,o,p,h,c,k,m,v,g,U,x,y,b,V,z,D,E,B,C,q,w,W,Z,A,N,O,X,j,H,J,M,P,R,S],64)}]])},3744:(l,e)=>{e.Z=(l,e)=>{const n=l.__vccOpts||l;for(const[l,u]of e)n[l]=u;return n}},5287:(l,e,n)=>{l.exports=n.p+"assets/img/10.b92ee260.png"},9328:(l,e,n)=>{l.exports=n.p+"assets/img/11.68957b5f.png"},8164:(l,e,n)=>{l.exports=n.p+"assets/img/12.f0bedbc1.png"},3536:(l,e,n)=>{l.exports=n.p+"assets/img/13.8d4cb37b.png"},3229:(l,e,n)=>{l.exports=n.p+"assets/img/4.c6e97054.png"}}]);